#!/bin/bash
# AI „É¢„Éá„É´Ëá™ÂãïË®≠ÂÆö„Çπ„ÇØ„É™„Éó„Éà - Claude Opus „Å® Gemini 2.0 Flash „ÇíËá™ÂãïÈÅ∏Êäû

set -e

# „Ç´„É©„ÉºÂÆöÁæ©
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}ü§ñ CCTeam AI Model Configuration${NC}"
echo "=================================="

# ClaudeË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆ„Éë„Çπ
CLAUDE_CONFIG="$HOME/.claude.json"
CLAUDE_LOCAL_CONFIG="$HOME/CC-Team/CCTeam/.claude/settings.local.json"

# GeminiË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆ„Éë„Çπ
GEMINI_CONFIG="$HOME/.gemini/config.json"

# Èñ¢Êï∞: Claude„ÅÆË®≠ÂÆö
configure_claude() {
    echo -e "\n${YELLOW}üìù Configuring Claude Code...${NC}"
    
    # .claude/settings.local.json „Çí‰ΩúÊàê
    mkdir -p "$(dirname "$CLAUDE_LOCAL_CONFIG")"
    
    cat > "$CLAUDE_LOCAL_CONFIG" << 'EOF'
{
  "defaultModel": "claude-opus-4-20250514",
  "models": {
    "preferred": [
      "claude-opus-4-20250514"
    ],
    "blocked": [
      "claude-3-haiku-20240307"
    ]
  },
  "features": {
    "alwaysUseOpus": true,
  "authentication": "account",
  "plan": "MAX",
    "autoSelectBestModel": false
  },
  "experimental": {
    "forceOpusForComplexTasks": true
  }
}
EOF
    
    # „Ç∞„É≠„Éº„Éê„É´Ë®≠ÂÆö„ÇÇÊõ¥Êñ∞ÔºàÊó¢Â≠ò„ÅÆË®≠ÂÆö„Çí‰øùÊåÅ„Åó„Å™„Åå„ÇâÔºâ
    if [ -f "$CLAUDE_CONFIG" ]; then
        # Êó¢Â≠òË®≠ÂÆö„Çí„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó
        cp "$CLAUDE_CONFIG" "$CLAUDE_CONFIG.backup"
        
        # jq„Çí‰Ωø„Å£„Å¶Ë®≠ÂÆö„ÇíÊõ¥Êñ∞
        if command -v jq &> /dev/null; then
            jq '.defaultModel = "claude-opus-4-20250514" | 
                .preferredModels = ["claude-opus-4-20250514"] |
                .modelSelection = "manual" |
                .alwaysUseHighestModel = true' "$CLAUDE_CONFIG.backup" > "$CLAUDE_CONFIG"
        else
            # jq„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÁõ¥Êé•Êõ∏„ÅçËæº„Åø
            cat > "$CLAUDE_CONFIG" << 'EOF'
{
  "defaultModel": "claude-opus-4-20250514",
  "preferredModels": ["claude-opus-4-20250514"],
  "modelSelection": "manual",
  "alwaysUseHighestModel": true,
  "authentication": "account-based",
  "plan": "MAX"
}
EOF
        fi
    fi
    
    echo -e "${GREEN}‚úì Claude configured to use Opus model${NC}"
}

# Èñ¢Êï∞: Gemini„ÅÆË®≠ÂÆö
configure_gemini() {
    echo -e "\n${YELLOW}üìù Configuring Gemini CLI...${NC}"
    
    # GeminiË®≠ÂÆö„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
    mkdir -p "$(dirname "$GEMINI_CONFIG")"
    
    # Gemini CLIË®≠ÂÆö„Éï„Ç°„Ç§„É´‰ΩúÊàê
    cat > "$GEMINI_CONFIG" << 'EOF'
{
  "model": "gemini-2.0-flash-exp",
  "temperature": 0.7,
  "maxTokens": 8192,
  "topP": 0.95,
  "topK": 40,
  "settings": {
    "defaultModel": "gemini-2.0-flash-exp",
    "fallbackModel": "gemini-1.5-pro",
    "autoRetry": true,
    "retryCount": 3
  }
}
EOF
    
    # Áí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö„Çπ„ÇØ„É™„Éó„Éà
    cat > "$HOME/.gemini-env" << 'EOF'
# Gemini CLI Environment Variables
export GEMINI_MODEL="gemini-2.0-flash-exp"
export GEMINI_API_KEY="${GEMINI_API_KEY:-}"
export GEMINI_TEMPERATURE="0.7"
export GEMINI_MAX_TOKENS="8192"

# Gemini CLI alias with model preset
alias gemini='gemini --model gemini-2.0-flash-exp'
alias gemini-pro='gemini --model gemini-1.5-pro'
alias gemini-flash='gemini --model gemini-2.0-flash-exp'
EOF
    
    echo -e "${GREEN}‚úì Gemini configured to use 2.0 Flash model${NC}"
}

# Èñ¢Êï∞: „Ç®„Éº„Ç∏„Çß„É≥„ÉàÊåáÁ§∫Êõ∏„ÅÆÊõ¥Êñ∞
update_agent_instructions() {
    echo -e "\n${YELLOW}üìù Updating agent instructions...${NC}"
    
    # BOSS„Ç®„Éº„Ç∏„Çß„É≥„Éà„Å´„É¢„Éá„É´ÊåáÂÆö„ÇíËøΩÂä†
    cat >> instructions/boss-models.md << 'EOF'

## AI „É¢„Éá„É´‰ΩøÁî®„Ç¨„Ç§„Éâ„É©„Ç§„É≥

### Claude Code (Opus 4)
- Ë§áÈõë„Å™ÂïèÈ°åËß£Ê±∫
- „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£Ë®≠Ë®à
- „Ç≥„Éº„Éâ„É¨„Éì„É•„Éº
- Êà¶Áï•ÁöÑÂà§Êñ≠

### Gemini CLI (2.0 Flash)
- È´òÈÄü„Å™ÊÉÖÂ†±Ê§úÁ¥¢
- „Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê
- Á∞°Âçò„Å™„Ç≥„Éº„ÉâÁîüÊàê
- API‰ªïÊßòË™øÊüª

### ‰Ωø„ÅÑÂàÜ„Åë‰æã
```bash
# Ë§áÈõë„Å™ÂïèÈ°å„ÅØClaude Opus 4
claude-code "„Åì„ÅÆË§áÈõë„Å™„Éê„Ç∞„ÅÆÂéüÂõ†„ÇíÂàÜÊûê„Åó„Å¶‰øÆÊ≠£ÊñπÊ≥ï„ÇíÊèêÊ°à„Åó„Å¶"

# Á¥†Êó©„ÅÑË™øÊüª„ÅØGemini
gemini "React 19„ÅÆÊñ∞Ê©üËÉΩ„Çí„É™„Çπ„Éà„Ç¢„ÉÉ„Éó„Åó„Å¶"
gemini "„Åì„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ‰∏ÄËà¨ÁöÑ„Å™ÂéüÂõ†„ÅØÔºü"
```
EOF
    
    echo -e "${GREEN}‚úì Agent instructions updated${NC}"
}

# Èñ¢Êï∞: Ëµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà„ÅÆÊõ¥Êñ∞
update_launch_script() {
    echo -e "\n${YELLOW}üìù Updating launch script...${NC}"
    
    # launch-ccteam.sh „Å´„É¢„Éá„É´Ë®≠ÂÆö„ÇíËøΩÂä†
    sed -i.bak '1a\
\
# AI „É¢„Éá„É´Ëá™ÂãïË®≠ÂÆö\
export CLAUDE_MODEL="claude-opus-4-20250514"\
export GEMINI_MODEL="gemini-2.0-flash-exp"\
source ~/.gemini-env 2>/dev/null || true\
' scripts/launch-ccteam.sh
    
    echo -e "${GREEN}‚úì Launch script updated${NC}"
}

# Èñ¢Êï∞: Ê§úË®º
verify_configuration() {
    echo -e "\n${BLUE}üîç Verifying configuration...${NC}"
    
    # ClaudeË®≠ÂÆöÁ¢∫Ë™ç
    if [ -f "$CLAUDE_LOCAL_CONFIG" ]; then
        echo -e "${GREEN}‚úì Claude local config exists${NC}"
        echo "  Model: $(jq -r '.defaultModel' "$CLAUDE_LOCAL_CONFIG" 2>/dev/null || echo "claude-opus-4-20250514")"
    else
        echo -e "${RED}‚úó Claude config not found${NC}"
    fi
    
    # GeminiË®≠ÂÆöÁ¢∫Ë™ç
    if [ -f "$GEMINI_CONFIG" ]; then
        echo -e "${GREEN}‚úì Gemini config exists${NC}"
        echo "  Model: $(jq -r '.model' "$GEMINI_CONFIG" 2>/dev/null || echo "gemini-2.0-flash-exp")"
    else
        echo -e "${RED}‚úó Gemini config not found${NC}"
    fi
    
    # Áí∞Â¢ÉÂ§âÊï∞Á¢∫Ë™ç
    if [ -f "$HOME/.gemini-env" ]; then
        echo -e "${GREEN}‚úì Gemini environment configured${NC}"
    fi
}

# Èñ¢Êï∞: API„Ç≠„ÉºË®≠ÂÆö„Éò„É´„Éë„Éº
setup_api_keys() {
    echo -e "\n${YELLOW}üîë API Key Setup${NC}"
    
    # Claude - MAX„Éó„É©„É≥‰ΩøÁî®
    echo -e "${GREEN}‚úì Claude: Using MAX plan account authentication${NC}"
    echo "  No API key required - using account login"
    
    # Gemini API„Ç≠„Éº
    if [ -z "$GEMINI_API_KEY" ]; then
        echo -e "${YELLOW}Gemini API key not found in environment${NC}"
        echo "Add to your shell config:"
        echo "export GEMINI_API_KEY='your-api-key-here'"
        echo "Get your free API key at: https://makersuite.google.com/app/apikey"
    else
        echo -e "${GREEN}‚úì Gemini API key found${NC}"
    fi
}

# „É°„Ç§„É≥Âá¶ÁêÜ
main() {
    case "$1" in
        "claude")
            configure_claude
            ;;
        "gemini")
            configure_gemini
            ;;
        "verify")
            verify_configuration
            ;;
        "keys")
            setup_api_keys
            ;;
        *)
            # „Éá„Éï„Ç©„É´„Éà: ÂÖ®„Å¶Ë®≠ÂÆö
            configure_claude
            configure_gemini
            update_agent_instructions
            update_launch_script
            verify_configuration
            
            echo -e "\n${BLUE}üìã Next Steps:${NC}"
            echo "1. Claude: Already configured (using MAX plan account)"
            echo ""
            echo "2. Gemini: Set your API key (if not already set):"
            echo "   export GEMINI_API_KEY='your-gemini-key'"
            echo "   Get free API key: https://makersuite.google.com/app/apikey"
            echo ""
            echo "3. Add to your shell config (.bashrc/.zshrc):"
            echo "   source ~/.gemini-env"
            echo ""
            echo "4. Restart your terminal or run:"
            echo "   source ~/.bashrc  # or ~/.zshrc"
            echo ""
            echo -e "${GREEN}‚úÖ Model configuration complete!${NC}"
            echo "Claude will use: Opus 4 (claude-opus-4-20250514)"
            echo "Gemini will use: 2.0 Flash (gemini-2.0-flash-exp)"
            ;;
    esac
}

# ÂÆüË°å
main "$@"