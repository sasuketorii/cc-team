#!/bin/bash
# ÂìÅË≥™„Ç≤„Éº„Éà„Ç∑„Çπ„ÉÜ„É† - „Éê„Ç∞„ÇÑÂìÅË≥™‰∏çËâØ„ÇíÊ§úÂá∫„Åó„Å¶„Ç≥„Éü„ÉÉ„Éà„ÇíÈò≤„Åê

set -e

# „Ç´„É©„ÉºÂÆöÁæ©
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# ÂìÅË≥™Âü∫Ê∫ñ„ÅÆË®≠ÂÆö
MIN_TEST_COVERAGE=80
MAX_COMPLEXITY=10
MAX_DUPLICATION=5
MAX_LINT_ERRORS=0
MAX_SECURITY_ISSUES=0

# ÁµêÊûúÊ†ºÁ¥çÁî®
QUALITY_SCORE=100
ISSUES=()

echo -e "${BLUE}üõ°Ô∏è  CCTeam Quality Gate System${NC}"
echo "================================="

# Èñ¢Êï∞: „ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏„ÉÅ„Çß„ÉÉ„ÇØ
check_test_coverage() {
    echo -e "\n${YELLOW}üìä Checking test coverage...${NC}"
    
    # „ÉÜ„Çπ„ÉàÂÆüË°å„Å®„Ç´„Éê„É¨„ÉÉ„Ç∏ÂèñÂæó
    if command -v npm &> /dev/null && [ -f "package.json" ] && [ -f "jest.config.js" ]; then
        # Jest„ÉÜ„Çπ„Éà„ÇíÂÆüË°å
        if npm test -- --coverage --silent 2>/dev/null; then
            COVERAGE=$(cat coverage/coverage-summary.json 2>/dev/null | jq '.total.lines.pct' 2>/dev/null || echo "0")
            
            if [ "$COVERAGE" = "0" ] || [ -z "$COVERAGE" ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  No test coverage data available${NC}"
                ISSUES+=("‚ö†Ô∏è  No test coverage data")
                QUALITY_SCORE=$((QUALITY_SCORE - 10))
            elif (( $(echo "$COVERAGE < $MIN_TEST_COVERAGE" | bc -l) )); then
                ISSUES+=("‚ùå Test coverage is ${COVERAGE}% (minimum: ${MIN_TEST_COVERAGE}%)")
                QUALITY_SCORE=$((QUALITY_SCORE - 20))
                return 1
            else
                echo -e "${GREEN}‚úì Test coverage: ${COVERAGE}%${NC}"
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Tests failed or not configured${NC}"
            ISSUES+=("‚ö†Ô∏è  Tests not properly configured")
            QUALITY_SCORE=$((QUALITY_SCORE - 15))
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Test infrastructure not found${NC}"
        ISSUES+=("‚ö†Ô∏è  Test infrastructure missing")
        QUALITY_SCORE=$((QUALITY_SCORE - 10))
    fi
    return 0
}

# Èñ¢Êï∞: Lint„ÉÅ„Çß„ÉÉ„ÇØ
check_lint() {
    echo -e "\n${YELLOW}üîç Running lint checks...${NC}"
    
    # ESLintÂÆüË°å
    if [ -f ".eslintrc.json" ] || [ -f ".eslintrc.js" ]; then
        LINT_ERRORS=$(npm run lint --silent 2>&1 | grep -c "error" || echo "0")
        
        if [ "$LINT_ERRORS" -gt "$MAX_LINT_ERRORS" ]; then
            ISSUES+=("‚ùå Found ${LINT_ERRORS} lint errors (maximum: ${MAX_LINT_ERRORS})")
            QUALITY_SCORE=$((QUALITY_SCORE - 15))
            return 1
        else
            echo -e "${GREEN}‚úì No lint errors found${NC}"
        fi
    fi
    return 0
}

# Èñ¢Êï∞: TypeScript„Ç®„É©„Éº„ÉÅ„Çß„ÉÉ„ÇØ
check_typescript() {
    echo -e "\n${YELLOW}üìò Checking TypeScript...${NC}"
    
    if [ -f "tsconfig.json" ]; then
        TS_ERRORS=$(npx tsc --noEmit 2>&1 | grep -c "error" || echo "0")
        
        if [ "$TS_ERRORS" -gt 0 ]; then
            ISSUES+=("‚ùå Found ${TS_ERRORS} TypeScript errors")
            QUALITY_SCORE=$((QUALITY_SCORE - 25))
            return 1
        else
            echo -e "${GREEN}‚úì No TypeScript errors${NC}"
        fi
    fi
    return 0
}

# Èñ¢Êï∞: „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ
check_security() {
    echo -e "\n${YELLOW}üîí Security scanning...${NC}"
    
    # npm audit
    if [ -f "package-lock.json" ]; then
        VULNERABILITIES=$(npm audit --json 2>/dev/null | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' || echo "0")
        
        if [ "$VULNERABILITIES" -gt "$MAX_SECURITY_ISSUES" ]; then
            ISSUES+=("‚ùå Found ${VULNERABILITIES} high/critical vulnerabilities")
            QUALITY_SCORE=$((QUALITY_SCORE - 30))
            return 1
        else
            echo -e "${GREEN}‚úì No security vulnerabilities${NC}"
        fi
    fi
    return 0
}

# Èñ¢Êï∞: „Ç≥„Éº„ÉâË§áÈõëÂ∫¶„ÉÅ„Çß„ÉÉ„ÇØ
check_complexity() {
    echo -e "\n${YELLOW}üß© Checking code complexity...${NC}"
    
    # Á∞°ÊòìÁöÑ„Å™Ë§áÈõëÂ∫¶„ÉÅ„Çß„ÉÉ„ÇØÔºàÂÆüÈöõ„ÅØESLint„ÅÆcomplexity„É´„Éº„É´„ÅßÂÆüË£ÖÔºâ
    COMPLEX_FILES=$(find . -name "*.js" -o -name "*.ts" | xargs grep -l "if.*if.*if" | wc -l || echo "0")
    
    if [ "$COMPLEX_FILES" -gt "$MAX_COMPLEXITY" ]; then
        ISSUES+=("‚ö†Ô∏è  Found ${COMPLEX_FILES} files with high complexity")
        QUALITY_SCORE=$((QUALITY_SCORE - 10))
    else
        echo -e "${GREEN}‚úì Code complexity is acceptable${NC}"
    fi
}

# Èñ¢Êï∞: „Éì„É´„Éâ„ÉÅ„Çß„ÉÉ„ÇØ
check_build() {
    echo -e "\n${YELLOW}üèóÔ∏è  Checking build...${NC}"
    
    if [ -f "package.json" ] && grep -q '"build"' package.json; then
        if ! npm run build --silent > /dev/null 2>&1; then
            ISSUES+=("‚ùå Build failed")
            QUALITY_SCORE=$((QUALITY_SCORE - 30))
            return 1
        else
            echo -e "${GREEN}‚úì Build successful${NC}"
        fi
    fi
    return 0
}

# Èñ¢Êï∞: Gemini„Å´„Çà„ÇãËøΩÂä†„ÉÅ„Çß„ÉÉ„ÇØ
check_with_gemini() {
    echo -e "\n${YELLOW}ü§ñ AI Quality Review...${NC}"
    
    # ÊúÄËøë„ÅÆÂ§âÊõ¥„ÇíÂèñÂæó
    CHANGES=$(git diff --cached --name-only)
    
    if [ -n "$CHANGES" ]; then
        # Gemini„Å´„Ç≥„Éº„ÉâÂìÅË≥™„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åï„Åõ„Çã
        GEMINI_CHECK=$(gemini "‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆÂ§âÊõ¥„Å´ÊΩúÂú®ÁöÑ„Å™ÂïèÈ°å„Åå„Å™„ÅÑ„ÅãÁ¢∫Ë™ç: $CHANGES" 2>/dev/null || echo "")
        
        if echo "$GEMINI_CHECK" | grep -qi "ÂïèÈ°å\|„Ç®„É©„Éº\|Ë≠¶Âëä"; then
            ISSUES+=("‚ö†Ô∏è  AI detected potential issues: $GEMINI_CHECK")
            QUALITY_SCORE=$((QUALITY_SCORE - 5))
        fi
    fi
}

# „É°„Ç§„É≥„ÅÆÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å
run_quality_checks() {
    check_test_coverage
    check_lint
    check_typescript
    check_security
    check_complexity
    check_build
    check_with_gemini
}

# ÂìÅË≥™„Ç≤„Éº„ÉàÂà§ÂÆö
evaluate_quality() {
    echo -e "\n${BLUE}üìã Quality Gate Results${NC}"
    echo "========================"
    
    if [ ${#ISSUES[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úÖ All quality checks passed!${NC}"
        echo -e "Quality Score: ${GREEN}${QUALITY_SCORE}/100${NC}"
        return 0
    else
        echo -e "${RED}‚ùå ÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ„ÅåÂü∫Ê∫ñ„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì${NC}"
        echo -e "ÂìÅË≥™„Çπ„Ç≥„Ç¢: ${RED}${QUALITY_SCORE}/100${NC} (ÂøÖË¶Å: 80/100‰ª•‰∏ä)"
        echo -e "\n${RED}ÊîπÂñÑ„ÅåÂøÖË¶Å„Å™È†ÖÁõÆ:${NC}"
        for issue in "${ISSUES[@]}"; do
            echo "  $issue"
        done
        return 1
    fi
}

# Git pre-commit„Éï„ÉÉ„ÇØ„Å®„Åó„Å¶‰ΩøÁî®„Åô„ÇãÂ†¥Âêà
if [ "$1" = "pre-commit" ]; then
    run_quality_checks
    
    if ! evaluate_quality; then
        echo -e "\n${RED}üö´ ÂìÅË≥™Âü∫Ê∫ñ„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Å™„ÅÑ„Åü„ÇÅ„ÄÅ„Ç≥„Éü„ÉÉ„Éà„Çí„Éñ„É≠„ÉÉ„ÇØ„Åó„Åæ„Åó„Åü${NC}"
        echo "‰∏äË®ò„ÅÆÂïèÈ°å„Çí‰øÆÊ≠£„Åó„Å¶„Åã„Çâ„Ç≥„Éü„ÉÉ„Éà„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        
        # Ëá™Âãï‰øÆÊ≠£„ÅÆÊèêÊ°à
        echo -e "\n${YELLOW}üí° ‰øÆÊ≠£ÊñπÊ≥ï„ÅÆÊèêÊ°à:${NC}"
        echo "1. „ÉÜ„Çπ„Éà„ÅÆÂ§±Êïó„ÇíÁ¢∫Ë™ç: npm test"
        echo "2. „É™„É≥„Éà„Ç®„É©„Éº„ÇíËá™Âãï‰øÆÊ≠£: npm run lint --fix"
        echo "3. ËÑÜÂº±ÊÄß„Çí‰øÆÊ≠£: npm audit fix"
        echo "4. „Ç´„Éê„É¨„ÉÉ„Ç∏„ÇíÁ¢∫Ë™ç: npm run test:coverage"
        
        exit 1
    fi
    
    echo -e "\n${GREEN}‚úÖ Quality gate passed. Proceeding with commit...${NC}"
    exit 0
fi

# ÊâãÂãïÂÆüË°å„ÅÆÂ†¥Âêà
if [ "$1" = "report" ]; then
    run_quality_checks
    evaluate_quality
    
    # „É¨„Éù„Éº„ÉàÁîüÊàê
    REPORT_FILE="reports/quality/quality-report-$(date +%Y%m%d-%H%M%S).json"
    mkdir -p reports/quality
    
    cat > "$REPORT_FILE" << EOF
{
    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "score": $QUALITY_SCORE,
    "passed": $([ ${#ISSUES[@]} -eq 0 ] && echo "true" || echo "false"),
    "issues": [
        $(printf '"%s",' "${ISSUES[@]}" | sed 's/,$//')
    ]
}
EOF
    
    echo -e "\nüìÑ Report saved to: $REPORT_FILE"
fi

# CI/CDÁµ±Âêà„É¢„Éº„Éâ
if [ "$1" = "ci" ]; then
    run_quality_checks
    
    if ! evaluate_quality; then
        # GitHub Actions„ÅÆ„Ç¢„Éé„ÉÜ„Éº„Ç∑„Éß„É≥
        for issue in "${ISSUES[@]}"; do
            echo "::error::$issue"
        done
        exit 1
    fi
    
    # ÊàêÂäüÊôÇ„ÅÆ„É°„Éà„É™„ÇØ„ÇπÂá∫Âäõ
    echo "::notice::Quality Score: ${QUALITY_SCORE}/100"
    exit 0
fi

# „Éò„É´„Éó
if [ -z "$1" ] || [ "$1" = "help" ]; then
    echo "Usage: $0 {pre-commit|report|ci|help}"
    echo ""
    echo "Modes:"
    echo "  pre-commit  - Run as git pre-commit hook"
    echo "  report      - Generate quality report"
    echo "  ci          - Run in CI/CD pipeline"
    echo "  help        - Show this help"
fi