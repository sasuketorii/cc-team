#!/bin/bash

# Error Analysis Script
# „Ç®„É©„Éº„É≠„Ç∞„ÇíÂàÜÊûê„Åó„ÄÅ„Éë„Çø„Éº„É≥„ÇíÊ§úÂá∫„Åó„Åæ„Åô

# ÂÖ±ÈÄö„Ç´„É©„ÉºÂÆöÁæ©„ÇíË™≠„ÅøËæº„Åø
source "$(dirname "${BASH_SOURCE[0]}")/common/colors.sh"

echo "üîç CCTeam „Ç®„É©„ÉºÂàÜÊûê„ÇíÂÆüË°å„Åó„Å¶„ÅÑ„Åæ„Åô..."
echo ""

# „Ç®„É©„Éº„É´„Éº„ÉóÊ§úÂá∫Ê©üËÉΩ„ÅÆÊúâÂäπÂåñ
ENABLE_LOOP_DETECTION=true

# „Ç™„Éó„Ç∑„Éß„É≥Ëß£Êûê
TIME_RANGE="all"
if [ "$1" == "--last-hour" ]; then
    TIME_RANGE="hour"
elif [ "$1" == "--today" ]; then
    TIME_RANGE="today"
fi

# „É≠„Ç∞„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÁ¢∫Ë™ç
if [ ! -d "logs" ]; then
    echo "‚ùå logs„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
    exit 1
fi

# „Ç®„É©„ÉºÁµ±Ë®à„ÇíÂàùÊúüÂåñ
declare -A ERROR_COUNTS
declare -A ERROR_TYPES
TOTAL_ERRORS=0

# ÂêÑ„É≠„Ç∞„Éï„Ç°„Ç§„É´„Åã„Çâ„Ç®„É©„Éº„ÇíÊäΩÂá∫
echo -e "${CYAN}„Äê„Ç®„É©„ÉºÊ§úÂá∫„Äë${NC}"
for logfile in logs/*.log; do
    if [ -f "$logfile" ]; then
        filename=$(basename "$logfile")
        
        # ÊôÇÈñìÁØÑÂõ≤„Å´Âü∫„Å•„ÅÑ„Å¶„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        case $TIME_RANGE in
            "hour")
                ERRORS=$(grep -i "error\|failed\|exception" "$logfile" | grep "$(date -d '1 hour ago' '+%Y-%m-%d %H')" 2>/dev/null || true)
                ;;
            "today")
                ERRORS=$(grep -i "error\|failed\|exception" "$logfile" | grep "$(date '+%Y-%m-%d')" 2>/dev/null || true)
                ;;
            *)
                ERRORS=$(grep -i "error\|failed\|exception" "$logfile" 2>/dev/null || true)
                ;;
        esac
        
        ERROR_COUNT=$(echo "$ERRORS" | grep -c . || true)
        
        if [ $ERROR_COUNT -gt 0 ]; then
            echo -e "${RED}$filename${NC}: $ERROR_COUNT „Ç®„É©„Éº"
            ERROR_COUNTS[$filename]=$ERROR_COUNT
            TOTAL_ERRORS=$((TOTAL_ERRORS + ERROR_COUNT))
            
            # „Ç®„É©„Éº„Çø„Ç§„Éó„ÅÆÂàÜÈ°û
            while IFS= read -r error_line; do
                if echo "$error_line" | grep -qi "timeout"; then
                    ((ERROR_TYPES[timeout]++))
                elif echo "$error_line" | grep -qi "connection\|network"; then
                    ((ERROR_TYPES[network]++))
                elif echo "$error_line" | grep -qi "permission\|denied"; then
                    ((ERROR_TYPES[permission]++))
                elif echo "$error_line" | grep -qi "not found\|missing"; then
                    ((ERROR_TYPES[notfound]++))
                elif echo "$error_line" | grep -qi "syntax\|parse"; then
                    ((ERROR_TYPES[syntax]++))
                else
                    ((ERROR_TYPES[other]++))
                fi
            done <<< "$ERRORS"
        fi
    fi
done

if [ $TOTAL_ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ „Ç®„É©„Éº„ÅØÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü${NC}"
else
    # „Ç®„É©„Éº„Çø„Ç§„ÉóÂà•Áµ±Ë®à
    echo ""
    echo -e "${CYAN}„Äê„Ç®„É©„Éº„Çø„Ç§„ÉóÂàÜÊûê„Äë${NC}"
    for error_type in "${!ERROR_TYPES[@]}"; do
        count=${ERROR_TYPES[$error_type]}
        percentage=$((count * 100 / TOTAL_ERRORS))
        case $error_type in
            "timeout")
                echo "‚è±Ô∏è  „Çø„Ç§„É†„Ç¢„Ç¶„Éà: $count‰ª∂ ($percentage%)"
                ;;
            "network")
                echo "üåê „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ: $count‰ª∂ ($percentage%)"
                ;;
            "permission")
                echo "üîí Ê®©Èôê„Ç®„É©„Éº: $count‰ª∂ ($percentage%)"
                ;;
            "notfound")
                echo "‚ùì Êú™Ê§úÂá∫: $count‰ª∂ ($percentage%)"
                ;;
            "syntax")
                echo "üìù ÊßãÊñá„Ç®„É©„Éº: $count‰ª∂ ($percentage%)"
                ;;
            "other")
                echo "‚ùî „Åù„ÅÆ‰ªñ: $count‰ª∂ ($percentage%)"
                ;;
        esac
    done
fi

# ÊúÄ„ÇÇÂïèÈ°å„ÅÆ„ÅÇ„Çã„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÇíÁâπÂÆö
echo ""
echo -e "${CYAN}„Äê„Ç®„Éº„Ç∏„Çß„É≥„ÉàÂà•ÂàÜÊûê„Äë${NC}"
if [ ${#ERROR_COUNTS[@]} -gt 0 ]; then
    MAX_ERRORS=0
    PROBLEMATIC_AGENT=""
    
    for agent in "${!ERROR_COUNTS[@]}"; do
        if [ ${ERROR_COUNTS[$agent]} -gt $MAX_ERRORS ]; then
            MAX_ERRORS=${ERROR_COUNTS[$agent]}
            PROBLEMATIC_AGENT=$agent
        fi
    done
    
    echo -e "${YELLOW}‚ö†Ô∏è  ÊúÄ„ÇÇÂïèÈ°å„ÅÆ„ÅÇ„Çã„É≠„Ç∞: $PROBLEMATIC_AGENT ($MAX_ERRORS „Ç®„É©„Éº)${NC}"
fi

# Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥
echo ""
echo -e "${CYAN}„ÄêÊé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥„Äë${NC}"

if [ $TOTAL_ERRORS -eq 0 ]; then
    echo "üëç „Ç∑„Çπ„ÉÜ„É†„ÅØÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô"
else
    # „Ç®„É©„Éº„Çø„Ç§„Éó„Å´Âü∫„Å•„ÅÑ„ÅüÊé®Â•®‰∫ãÈ†Ö
    if [ ${ERROR_TYPES[timeout]:-0} -gt 0 ]; then
        echo "1. „Çø„Ç§„É†„Ç¢„Ç¶„ÉàÂÄ§„ÅÆË™øÊï¥„ÇíÊ§úË®é„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    fi
    
    if [ ${ERROR_TYPES[network]:-0} -gt 0 ]; then
        echo "2. „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    fi
    
    if [ ${ERROR_TYPES[permission]:-0} -gt 0 ]; then
        echo "3. „Éï„Ç°„Ç§„É´„Å®„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÊ®©Èôê„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    fi
    
    if [ ${ERROR_TYPES[notfound]:-0} -gt 0 ]; then
        echo "4. ÂøÖË¶Å„Å™„Éï„Ç°„Ç§„É´„ÇÑ‰æùÂ≠òÈñ¢‰øÇ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    fi
    
    if [ ${ERROR_TYPES[syntax]:-0} -gt 0 ]; then
        echo "5. „Ç≥„Éº„Éâ„ÅÆÊßãÊñá„Ç®„É©„Éº„Çí‰øÆÊ≠£„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    fi
    
    echo ""
    echo "Ë©≥Á¥∞„Å™„Ç®„É©„ÉºÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„Åô„Çã„Å´„ÅØ:"
    echo -e "${GREEN}grep -i 'error' logs/*.log | less${NC}"
fi

# „Ç®„É©„Éº„Éë„Çø„Éº„É≥„ÇíJSON„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
if [ $TOTAL_ERRORS -gt 0 ]; then
    mkdir -p logs/analysis
    TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
    cat > "logs/analysis/error_report_$TIMESTAMP.json" << EOF
{
  "timestamp": "$(date -Iseconds)",
  "total_errors": $TOTAL_ERRORS,
  "time_range": "$TIME_RANGE",
  "error_types": {
$(for error_type in "${!ERROR_TYPES[@]}"; do
    echo "    \"$error_type\": ${ERROR_TYPES[$error_type]},"
done | sed '$ s/,$//')
  },
  "agent_errors": {
$(for agent in "${!ERROR_COUNTS[@]}"; do
    echo "    \"$agent\": ${ERROR_COUNTS[$agent]},"
done | sed '$ s/,$//')
  }
}
EOF
    echo ""
    echo "üìä ÂàÜÊûê„É¨„Éù„Éº„Éà„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü: logs/analysis/error_report_$TIMESTAMP.json"
fi