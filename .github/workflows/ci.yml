name: CCTeam CI/CD

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 1' # 毎週月曜日午前9時（JST）

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tmux expect jq sqlite3
      
      - name: Install Node dependencies
        run: |
          if [ -f package.json ]; then
            npm ci || npm install
          fi
      
      - name: Install Python dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
      
      - name: Run unit tests
        run: |
          if [ -f package.json ] && grep -q "test" package.json; then
            npm test || true
          fi
      
      - name: Run integration tests
        run: |
          if [ -f ./tests/integration_test.sh ]; then
            ./tests/integration_test.sh || true
          fi
      
      - name: Run health checks
        run: |
          if [ -f ./tests/quick_health_check.sh ]; then
            ./tests/quick_health_check.sh
          fi
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            tests/history/
            logs/
          retention-days: 30

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm ci || npm install
          fi
      
      - name: Run ESLint
        run: |
          if [ -f package.json ] && grep -q "lint" package.json; then
            npm run lint || true
          fi
      
      - name: Check shell scripts
        run: |
          find scripts -name "*.sh" -type f -exec shellcheck {} + || true

  quality-check:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      
      - name: Run quality checks
        run: |
          if [ -f ./scripts/quality-gate.sh ]; then
            ./scripts/quality-gate.sh check || true
          fi
      
      - name: Generate quality report
        run: |
          if [ -f ./scripts/quality-gate.sh ]; then
            ./scripts/quality-gate.sh report > quality-report.md || echo "# Quality Report\nNo quality gate script found" > quality-report.md
          else
            echo "# Quality Report\nNo quality gate script found" > quality-report.md
          fi
      
      - name: Upload quality report
        uses: actions/upload-artifact@v3
        with:
          name: quality-report
          path: quality-report.md
      
      - name: Comment PR with quality report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');
            
            // 既存のボットコメントを探す
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('## 📊 Quality Report')
            );
            
            const body = `## 📊 Quality Report\n\n${report}\n\n---\n*Generated by CCTeam CI/CD*`;
            
            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              // 新規コメントを作成
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  security-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security checks
        run: |
          # シークレットの漏洩チェック
          echo "🔍 Checking for secrets..."
          
          # 基本的なパターンチェック
          if grep -rE "(api[_-]?key|secret|password|token)" . \
            --exclude-dir=.git \
            --exclude-dir=node_modules \
            --exclude-dir=.github \
            --exclude="*.md" \
            --exclude="*.json" | grep -v "example\|sample\|test\|mock"; then
            echo "⚠️  Potential secrets found!"
            exit 1
          else
            echo "✅ No obvious secrets found"
          fi
      
      - name: Check dependencies
        run: |
          if [ -f package.json ]; then
            npm audit --audit-level=high || true
          fi

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install and build
        run: |
          if [ -f package.json ]; then
            npm ci || npm install
            npm run build || echo "No build script found"
          fi
      
      - name: Create release archive
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          tar -czf ccteam-$VERSION.tar.gz \
            --exclude=.git \
            --exclude=node_modules \
            --exclude=logs \
            --exclude=worktrees \
            --exclude=memory/*.db \
            .
      
      - name: Upload release artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v3
        with:
          name: release-archive
          path: ccteam-*.tar.gz