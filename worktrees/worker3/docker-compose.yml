version: '3.8'

services:
  # Node.js アプリケーションサーバー
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ccteam-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://ccteam:password@postgres:5432/ccteam_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - ccteam-network
    command: npm run dev

  # PostgreSQL データベース
  postgres:
    image: postgres:15-alpine
    container_name: ccteam-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=ccteam
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=ccteam_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ccteam-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ccteam"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis キャッシュサーバー
  redis:
    image: redis:7-alpine
    container_name: ccteam-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ccteam-network
    command: redis-server --appendonly yes

  # Nginx リバースプロキシ
  nginx:
    image: nginx:alpine
    container_name: ccteam-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - ccteam-network

  # Adminer (データベース管理ツール)
  adminer:
    image: adminer:latest
    container_name: ccteam-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - ccteam-network

networks:
  ccteam-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data: